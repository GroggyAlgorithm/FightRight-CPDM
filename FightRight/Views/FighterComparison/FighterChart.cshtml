
@{
	ViewBag.Title = "Fighter Comparison - Chart";
}




@model FightRight.Models.FighterChart


<head>


	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
	<style src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.css"></style>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.bundle.js"></script>


</head>
		

<script>

	

	function progBars() {
		var elements;
		var windowHeight;

		function init() {
			elements = document.querySelectorAll('.progress-bar');
			windowHeight = window.innerHeight;
		}

		function checkPosition() {
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				var positionFromTop = elements[i].getBoundingClientRect().top;

				if (positionFromTop - windowHeight <= 0) {
					element.classList.add('move-in-left');
					element.classList.remove('hidden-left');
				}
				else {
					element.classList.remove('move-in-left');
					element.classList.add('hidden-left');
				}
			}
		}

		window.addEventListener('scroll', checkPosition);
		window.addEventListener('resize', init);

		init();
		checkPosition();
	};


	

	window.setInterval(progBars, 300);
</script>

@using (Html.BeginForm(FormMethod.Post))
{

	<br />
	<br />
	<br />

	<div class="card bg-black bg-opacity-25 rounded-3" style="width: 100%; margin: 4rem,0,4rem,0; overflow:hidden;" id="fighterSelectCard">


		<div class="col-xl-12 row card-header align-content-center" style="margin-left:0.5rem">

			<div class="card-header-pills text-black shadow-lg shadow col bg-transparent align-content-center" style="margin-top: 2rem;">
				@if (Model.fightersA != null)
				{
					var dropText = (Model.currentFighterNameA == "") ? "Select Fighter" : Model.currentFighterNameA;

					@Html.DropDownList("fighterSelectA", new SelectList(Model.fightersA.Values), dropText, new { @id = "FighterSelectA", @class = "card-body bg-dark text-white dropdown-menu-xxl-start rounded", @height = "100%", @width = "100%", @onchange = @"form.submit();" })
				}
			</div>

		</div>

		<div class="col-xl-12  row card-header align-content-center" style="margin-left:0.5rem">

			<div class="card-header-pills text-black shadow-lg shadow col bg-transparent align-content-center" style="margin-top: 2rem;">
				@if (Model.fightersB != null)
				{
					var dropText = (Model.currentFighterNameB == "") ? "Select Fighter" : Model.currentFighterNameB;

					@Html.DropDownList("fighterSelectB", new SelectList(Model.fightersB.Values), dropText, new { @id = "FighterSelectB", @class = "card-body bg-dark text-white dropdown-menu-xxl-start rounded", @height = "100%", @width = "100%", @onchange = @"form.submit();" })
				}
			</div>

		</div>




		<div class="col-xl-12  card-body" style="width:100%; margin-bottom:2rem;">



			<div class="text-white row bg-transparent" style="margin-top:0.5rem;">
				<div style="text-align:center">
					<button class="button-action shadow-lg rounded-3 bg-dark btn-outline-light text-white" id="btnFighterClear" name="btnFighterClear" value="Submit">Clear</button>
				</div>
			</div>

		</div>



	</div>

	<br />
	<br />
	<br />

}

@if (Model.currentSelectionA != 0 && Model.currentSelectionB != 0)
{

	if (Model.dcPrediction != null)
	{
		var aClassString = (Model.predictedID == Model.currentSelectionA) ? "winner_color" : "loser_color";
		var bClassString = (Model.predictedID == Model.currentSelectionB) ? "winner_color" : "loser_color";

		var aPercent = (float)Model.fighterACertainty;
		var bPercent = (float)Model.fighterBCertainty;

		var aWidth = ("width: " + aPercent.ToString() + "%");
		var bWidth = ("width: " + bPercent.ToString() + "%");

		<div class="card align-content-center bg-black bg-opacity-25 rounded-3" style="margin: 4rem,0,4rem,0; padding-left:0.5rem; padding-top:1rem; " id="fighterPrediction">

			<div class="row">
				<p class="col text-capitalize text-white text-center align-content-center" style="font-size:x-large">
					Predicted Winner
				</p>
			</div>
			<div class="row">
				<p class="col text-capitalize text-white text-center align-content-center" style="font-size:x-large">
					@Model.predictedName
				</p>
			</div>

			<div class="col-xl-12 col-md-5 row bg-transparent" style="width: 100%;">
				<br />
				<br />
				<div class="text-capitalize text-left mt-4 text-white col-2 full-content" style="font-size:large; text-align:left; ">
					Certainty
				</div>
				<div class="text-capitalize text-left mt-4 text-white col-4 mobile-content" style="font-size:large; text-align:left; ">
					Certainty
				</div>



				<div class="progress bg-transparent mt-4 col" style="height: 2rem;">

					<div class="@aClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @aWidth">
						<p style="margin-right: 1rem; margin-top:1rem; text-align:right;">
							@Math.Round(aPercent, 0).ToString()%
							<i class="fa-solid fa-caret-right fa-xl"></i>
						</p>
					</div>

					<div class="@bClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @bWidth">
						<p style="margin-left: 1rem; margin-top: 1rem; text-align: left;">
							<i class="fa-solid fa-caret-left fa-xl"></i>
							@Math.Round(bPercent, 0).ToString()%
						</p>
					</div>
				</div>
			</div>

			<br />
			<br />


		</div>
	}



	<br />
	<br />

	if (Model.dcFighterA_stats != null && Model.dcFighterB_stats != null)
	{

		<div class="card align-content-center bg-black bg-opacity-25 rounded-3" style="margin: 4rem,0,4rem,0; padding-left:0.5rem; padding-top:1rem; " id="fighterPercentagesCard">
			@{
				var statsLengthA = Model.dcFighterA_stats.Count;
				var statsLengthB = Model.dcFighterB_stats.Count;


				if (statsLengthA == statsLengthB)
				{
					<div class="row">
						<p class="col text-capitalize text-white text-center align-content-center" style="font-size:x-large">
							Percentages
						</p>
					</div>

					<br />
				<div class="row">
					<p class="col text-capitalize text-white text-center align-content-center" style="font-size:medium">
						* Click names to toggle fighter
					</p>
				</div>
				<canvas class="" id="percentageChart" style="width:100%;"></canvas>
				<br />

				<script>



					Chart.defaults.global.fontSize = 1400;
					Chart.defaults.global.borderColor = 'white';
					Chart.defaults.global.scaleGridLineColor = 'white';
					Chart.defaults.global.defaultFontColor = 'white';
					

					const ptx = document.getElementById('percentageChart');


					var percentageChart = {
						labels: ["Knockdowns", "Takedowns", "Significant Strikes", "Total Strikes"],


						datasets: [{

							label: "@Model.currentFighterNameA",
							data: [0, 0, 0, 0],
							fill: true,
							backgroundColor: 'rgba(255, 99, 132, 0.5)',
							borderColor: 'rgb(255, 99, 132)',
							pointBackgroundColor: 'rgb(255, 99, 132)',
							pointBorderColor: '#fff',
							pointHoverBackgroundColor: '#fff',
							pointHoverBorderColor: 'rgb(255, 99, 132)',
							hoverOffset: 4
						},
						{
							label: "@Model.currentFighterNameB",
							data: [0, 0, 0, 0],
							fill: true,
							backgroundColor: 'rgba(54, 162, 235, 0.5)',
							borderColor: 'rgb(54, 162, 235)',
							pointBackgroundColor: 'rgb(54, 162, 235)',
							pointBorderColor: '#fff',
							pointHoverBackgroundColor: '#fff',
							pointHoverBorderColor: 'rgb(54, 162, 235)',
							hoverOffset: 4
						}]
					};



					var percentageOptions = {
						responsive: true,
						spanGaps: true,
						legend: {
							position: 'top',
							fontColor: 'black',
						},
						tooltips: {
							enabled: true,
							callbacks: {
								label: function (tooltipItem, data) {
									//data.datasets[tooltipItem.datasetIndex].label //If we want to return the fighter name
									return data.labels[tooltipItem.index] + ': ' + data['datasets'][0]['data'][tooltipItem['index']] + '%';
								},
								title: function (context, tooltipItem) {
									//tooltipItem.labels[context[0].index] //If we want to return the type of data
									return "";
								},
							}
						},
						elements: {
							line: {
								borderWidth: 3,
								//tension:1,
							}
						},
						animation: {
							animateRotate: true,

						},
						plugins: {
							filler: {
								propagate: true
							}
						},
						scale: {
							angleLines: {
								display: true,
								color: 'white'
							},
							gridLines: {
								color: 'white'
							},
							pointLabels: {
								display: true
							},
							ticks: {
								display: false,

							},

						}


					}



					var percentageConfig = {
						type: 'radar',
						data: percentageChart,
						options: percentageOptions
					};



					var percentageChart = new Chart(ptx, percentageConfig);

				</script>


					for (int i = 0; i < statsLengthA; i++)
					{


						var aStats = Model.dcFighterA_stats.ElementAt(i);
						var bStats = Model.dcFighterB_stats.ElementAt(i);
						var maxVal = aStats.value + bStats.value;

						var aClassString = (aStats.value > bStats.value) ? "winner_color" : (aStats.value < bStats.value) ? "loser_color" : "tie_color";
						var bClassString = (aStats.value < bStats.value) ? "winner_color" : (aStats.value > bStats.value) ? "loser_color" : "tie_color";

						float aPercent = 0;
						float bPercent = 0;

						if (maxVal != 0 && aStats.value != bStats.value)
						{
							aPercent = (float)((aStats.value / maxVal) * 100);
							bPercent = (float)((bStats.value / maxVal) * 100);
						}
						else
						{
							aPercent = 50;
							bPercent = 50;
						}

						var aWidth = ("width: " + aPercent.ToString() + "%");
						var bWidth = ("width: " + bPercent.ToString() + "%");

						var currentLabel = aStats.Label.Trim();


						<script>

							percentageChart.data.datasets[0].data[@i] = @aPercent; // Would update the first dataset's value of 'March' to be 50
							percentageChart.data.datasets[1].data[@i] = @bPercent; // Would update the first dataset's value of 'March' to be 50
							percentageChart.update(); // Calling update now animates the position of March from 90 to 50.

						</script>



						if (i == statsLengthA - 1)
						{

							<div class="col-xl-12 col-md-5 row bg-transparent" style="width: 100%;">
								<div class="text-capitalize text-left mt-4 text-white col-2 full-content" style="font-size:large; text-align:left; ">
									@currentLabel
								</div>
								<div class="text-capitalize text-left mt-4 text-white col-4 mobile-content" style="font-size:large; text-align:left; ">
									@currentLabel
								</div>

								<div class="progress bg-transparent mt-4 col" style="height: 2rem; margin-bottom:2rem">

									<div class="@aClassString progress-bar rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @aWidth">
										<p style="margin-right: 1rem; margin-top:1rem; text-align:right;">

											@Math.Round(aPercent, 0).ToString()%
											<i class="fa-solid fa-caret-right fa-xl"></i>
										</p>
									</div>

									<div class="@bClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @bWidth">
										<p style="margin-left: 1rem; margin-top: 1rem; text-align: left;">
											<i class="fa-solid fa-caret-left fa-xl"></i>
											@Math.Round(bPercent, 0).ToString()%
										</p>
									</div>
								</div>
							</div>




						}
						else
						{
							<div class="col-xl-12 col-md-5 row bg-transparent" style="width:100%;">
								<div class="text-capitalize text-left mt-4 text-white col-2 full-content" style="font-size:large; text-align:left;">
									@currentLabel
								</div>
								<div class="text-capitalize text-left mt-4 text-white col-4 mobile-content" style="font-size:large; text-align:left;">
									@currentLabel
								</div>

								<div class="progress bg-transparent mt-4 col" style="height: 2rem;">

									<div class="@aClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @aWidth">
										<p style="margin-right: 1rem; margin-top:1rem; text-align:right;">

											@Math.Round(aPercent, 0).ToString()%
											<i class="fa-solid fa-caret-right fa-xl"></i>
										</p>
									</div>

									<div class="@bClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @bWidth">
										<p style="margin-left: 1rem; margin-top: 1rem; text-align: left;">
											<i class="fa-solid fa-caret-left fa-xl"></i>
											@Math.Round(bPercent, 0).ToString()%
										</p>
									</div>
								</div>
							</div>




						}





					}







				}

			}


		


		</div>
	}


	<br />
	<br />

	<div class="card align-content-center bg-black bg-opacity-25 rounded-3" style="margin: 4rem,0,4rem,0; padding-left:0.5rem; padding-top:1rem; " id="fighterTotalsCard">

		@if (Model.dcFighterA_total_stats != null && Model.dcFighterB_total_stats != null)
		{
			var totalStatsLengthA = Model.dcFighterA_total_stats.Count;
			var totalStatsLengthB = Model.dcFighterB_total_stats.Count;

			if (totalStatsLengthA != totalStatsLengthB) { totalStatsLengthA = 0; }
			else
			{
				<div class="row">
					<p class="col text-capitalize text-white text-center align-content-center" style="font-size:x-large">
						Totals
					</p>
				</div>


				<br />
				<div class="row">
					<p class="col text-capitalize text-white text-center align-content-center" style="font-size:medium">
						* Click names to toggle fighter
					</p>
				</div>
				<canvas class="" id="totalsChart" style="width:100%;"></canvas>
				<br />

				<script>


					Chart.defaults.global.fontSize = 1400;
					Chart.defaults.global.borderColor = 'white';
					Chart.defaults.global.scaleGridLineColor = 'white';
					Chart.defaults.global.defaultFontColor = 'white';


					const ctx = document.getElementById('totalsChart');


					var totalsChartData = {
						labels: ["Knockdowns", "Submission Attempts", "Takedowns", "Takedowns Attempted", "Total Strikes", "Total Strikes Attempted", "Significant Strikes"],


						datasets: [{

							label: "@Model.currentFighterNameA",
							data: [0, 0, 0, 0, 0, 0, 0],
							fill: true,
							backgroundColor: 'rgba(255, 99, 132, 0.5)',
							borderColor: 'rgb(255, 99, 132)',
							pointBackgroundColor: 'rgb(255, 99, 132)',
							pointBorderColor: '#fff',
							pointHoverBackgroundColor: '#fff',
							pointHoverBorderColor: 'rgb(255, 99, 132)',
							hoverOffset: 4
						},
						{
							label: "@Model.currentFighterNameB",
							data: [0, 0, 0, 0, 0, 0, 0],
							fill: true,
							backgroundColor: 'rgba(54, 162, 235, 0.5)',
							borderColor: 'rgb(54, 162, 235)',
							pointBackgroundColor: 'rgb(54, 162, 235)',
							pointBorderColor: '#fff',
							pointHoverBackgroundColor: '#fff',
							pointHoverBorderColor: 'rgb(54, 162, 235)',
							hoverOffset: 4
						}]
					};



					var totalsOptions = {

						legend: {
							position: 'top',
							fontColor: 'black',
						},
						tooltips: {
							enabled: true,
							mode: 'nearest',
							callbacks: {
								label: function (tooltipItem, data) {
									//data.datasets[tooltipItem.datasetIndex].label //If we want to return the fighter name
									return data.labels[tooltipItem.index] + ': ' + data['datasets'][0]['data'][tooltipItem['index']] + '%';
								},
								title: function (context, tooltipItem) {
									//tooltipItem.labels[context[0].index] //If we want to return the type of data
									return "";
								},
							}
						},
						elements: {
							line: {
								borderWidth: 3,
								//tension:1,
							}
						},
						animation: {
							animateRotate: false,

						},
						plugins: {
							filler: {
								propagate: true
							}
						},
						scale: {
							angleLines: {
								display: true,
								color: 'white'
							},
							gridLines: {
								color: 'white'
							},
							pointLabels: {
								display: true
							},
							ticks: {
								display: false,

							},

						}


					}



					var totalsConfig = {
						type: 'radar',
						data: totalsChartData,
						options: totalsOptions
					};



					var totalChart = new Chart(ctx, totalsConfig);

				</script>


			}


			for (int i = 0; i < totalStatsLengthA; i++)
			{

				var aStats = Model.dcFighterA_total_stats.ElementAt(i);
				var bStats = Model.dcFighterB_total_stats.ElementAt(i);


				var maxVal = aStats.value + bStats.value;

				var aClassString = (aStats.value > bStats.value) ? "winner_color" : (aStats.value < bStats.value) ? "loser_color" : "tie_color";
				var bClassString = (aStats.value < bStats.value) ? "winner_color" : (aStats.value > bStats.value) ? "loser_color" : "tie_color";

				float aPercent = 0;
				float bPercent = 0;

				if (maxVal != 0 && aStats.value != bStats.value)
				{
					aPercent = (float)((aStats.value / maxVal) * 100);
					bPercent = (float)((bStats.value / maxVal) * 100);
				}
				else
				{
					aPercent = 50;
					bPercent = 50;
				}

				var aWidth = ("width: " + aPercent.ToString() + "%");
				var bWidth = ("width: " + bPercent.ToString() + "%");

				var currentLabel = aStats.Label.Trim();


				<script>

					totalChart.data.datasets[0].data[@i] = @aPercent; // Would update the first dataset's value of 'March' to be 50
					totalChart.data.datasets[1].data[@i] = @bPercent; // Would update the first dataset's value of 'March' to be 50
					totalChart.update(); // Calling update now animates the position of March from 90 to 50.

				</script>



				if (i == totalStatsLengthA - 1)
				{

					<div class="col-xl-12 col-md-5 row bg-transparent" style="width: 100%;">
						<div class="text-capitalize text-left mt-4 text-white col-2 full-content" style="font-size:large; text-align:left; ">
							@currentLabel
						</div>
						<div class="text-capitalize text-left mt-4 text-white col-4 mobile-content" style="font-size:large; text-align:left; ">
							@currentLabel
						</div>

						<div class="progress bg-transparent mt-4 col" style="height: 2rem; margin-bottom:2rem">

							<div class="@aClassString progress-bar rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @aWidth">
								<p style="margin-right: 1rem; margin-top:1rem; text-align:right;">

									@Model.dcFighterA_total_stats.ElementAt(i).valueString
									<i class="fa-solid fa-caret-right fa-xl"></i>
								</p>
							</div>

							<div class="@bClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @bWidth">
								<p style="margin-left: 1rem; margin-top: 1rem; text-align: left;">
									<i class="fa-solid fa-caret-left fa-xl"></i>
									@Model.dcFighterB_total_stats.ElementAt(i).valueString
								</p>
							</div>
						</div>
					</div>



				}
				else
				{
					<div class="col-xl-12 col-md-5 row bg-transparent" style="width:100%;">
						<div class="text-capitalize text-left mt-4 text-white col-2 full-content" style="font-size:large; text-align:left;">
							@currentLabel
						</div>
						<div class="text-capitalize text-left mt-4 text-white col-4 mobile-content" style="font-size:large; text-align:left;">
							@currentLabel
						</div>

						<div class="progress bg-transparent mt-4 col" style="height: 2rem;">

							<div class="@aClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @aWidth">
								<p style="margin-right: 1rem; margin-top:1rem; text-align:right;">

									@Model.dcFighterA_total_stats.ElementAt(i).valueString
									<i class="fa-solid fa-caret-right fa-xl"></i>
								</p>
							</div>

							<div class="@bClassString progress-bar  rounded-3" role="progressbar" style="margin-right: 0.25rem; border: 1px solid black; @bWidth">
								<p style="margin-left: 1rem; margin-top: 1rem; text-align: left;">
									<i class="fa-solid fa-caret-left fa-xl"></i>
									@Model.dcFighterB_total_stats.ElementAt(i).valueString
								</p>
							</div>
						</div>
					</div>




				}





			}
		}

		@*<canvas class="" id="birdsCanvas" style="width:100%;"></canvas>*@
		@*const birdsCanvas = document.getElementById('birdsCanvas');

		var birdsData = {
				labels: ["Spring", "Summer", "Fall", "Winter"],
				datasets: [{
					data: [1200, 1700, 800, 200],
					backgroundColor: [
						"rgba(255, 0, 0, 0.6)",
						"rgba(0, 255,200, 0.6)",
						"rgba(200, 0, 200, 0.6)",
						"rgba(0, 255, 0, 0.6)"
					],
					borderColor: "rgba(0, 0, 0, 0.8)"
				}]
			};

			var chartOptions = {
				startAngle: -Math.PI / 4,
				legend: {
					position: 'left'
				},
				animation: {
					animateRotate: false
				}
			};

			var polarAreaChart = new Chart(birdsCanvas, {
				type: 'polarArea',
				data: birdsData,
				options: chartOptions
			});

		*@


	</div>


	<br />
	<br />
}

@if (@Model.currentFighterNameA != "" || @Model.currentFighterNameB != "")
{

	<div class="full-content">

		<br />
		<br />

		<div class="col-xl-12 col-md-5 row bg-transparent rounded-3" style="width: 100%; font-size: x-large; ">
			<div class="card text-white shadow-lg col bg-transparent" style="text-align:center;">
				<br />
				<br />
				@Model.currentFighterNameA
				@*<hr />*@
			</div>
			<div class="card text-white shadow-lg col bg-transparent" style="text-align:center;">
				<br />
				<br />
				@Model.currentFighterNameB
				@*	<hr />*@
			</div>
			<hr class="text-white" />
		</div>


		<div class="col-xl-12 col-md-5 row bg-transparent rounded-3" style="width: 100%; font-size: x-large;">

			<div class="card text-white shadow-lg col bg-transparent" style="text-align:center;">
				@if (Model.dcFighterA_profile != null)
				{
					foreach (var fighter in Model.dcFighterA_profile)
					{
						if (fighter.valueString != "")
						{
							<div>
								@fighter.Label @fighter.valueString
							</div>
						}
						else
						{
							<div>
								@fighter.Label ???
							</div>
						}
					}
				}

				<br />
				<br />

			</div>

			<div class="card text-white shadow-lg col bg-transparent " style="text-align:center;">
				@if (Model.dcFighterB_profile != null)
				{
					foreach (var fighter in Model.dcFighterB_profile)
					{
						if (fighter.valueString != "")
						{
							<div>
								@fighter.Label @fighter.valueString
							</div>
						}
						else
						{
							<div>
								@fighter.Label ???
							</div>
						}
					}
				}

				<br />
				<br />

			</div>


		</div>



	</div>


	<div class="mobile-content">

		<div class="col-xl-12 col-md-5 row" style="width: 100%; font-size: x-large;">
			<div class="card text-white shadow-lg col bg-black bg-opacity-25 rounded-3" style="text-align:center;">
				<br />
				<br />
				@Model.currentFighterNameA
				<hr />
				@if (Model.dcFighterA_profile != null)
				{
					foreach (var fighter in Model.dcFighterA_profile)
					{
						if (fighter.valueString != "")
						{
							<div>
								@fighter.Label @fighter.valueString
							</div>
						}
						else
						{
							<div>
								@fighter.Label ???
							</div>
						}
					}
				}
				<br />
				<br />
			</div>

		</div>

		<br />
		<br />

		<div class="col-xl-12 col-md-5 row" style="width: 100%; font-size: x-large;">
			<div class="card text-white shadow-lg col bg-black bg-opacity-25 rounded-3" style="text-align:center;">
				<br />
				<br />
				@Model.currentFighterNameB
				<hr />



				@if (Model.dcFighterB_profile != null)
				{
					foreach (var fighter in Model.dcFighterB_profile)
					{
						if (fighter.valueString != "")
						{
							<div>
								@fighter.Label @fighter.valueString
							</div>
						}
						else
						{
							<div>
								@fighter.Label ???
							</div>
						}
					}
				}
				<br />
				<br />

			</div>
		</div>



	</div>

}

<br />
<br />












